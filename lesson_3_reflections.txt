When would you want to use a remote repository rather than keeping all your work
local?

    I'll prefer to use a remote repository when i'll be collaborating with other
    users over a project.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    It is a good idea to to pull changes manually because then there won't
    be any introduction of unwanted changes into your local repository.
    These unwanted changes might occur due to someone else making changes to
    the remote repository.
    Hence, manually pulling changes after you have reviewed the changes made
    to the remote repository is a sound strategy.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    - branch: node A of local repository branch out to node B and C of same local repository
    - clone: clone local repository A from one local location to another local location.
    - clone: cl0ne Github repository A from one Github location to another local location.  (and vice versa)
    - fork: clone Github repository A from one Github location to another Github location. (and vice versa)

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit of having a copy of the last known state of thr remote stored
    locally is the fact that we will be up-to-date with the remote repository,
    which will help in avioiding doing a work that has already been done.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would have collaborated via sharing file through emails or storage devices.
    The thing that would easier for me would that i would not have to learn about
    any technology to collaborate.
    
    The thing that would be hard would be to be in sync with other collaborators.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You'd want ot make changes in a seperate branch rather than directly in master
    for perhaps an experimental feature for a project, or when collaborating with others 
    on a specific project. When making changes directly on master, it's beneficial because
    you'll only have to work with the simplicity of your project, using non-experimental 
    features but just the basis of what the project will be, while having the commit history
    in case of a revision. The benefits of having a seperate branch allows us to do something
    completely different on a project without damaging or modifying anything yet, or give
    developers time to work on projects and tackle different portions making development
    much faster when collaborating.
